# Python stubs generated by omniidl from idl/ModelLoader.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "OpenHRPCommon.idl"
import OpenHRPCommon_idl
_0_OpenHRP = omniORB.openModule("OpenHRP")
_0_OpenHRP__POA = omniORB.openModule("OpenHRP__POA")

#
# Start of module "OpenHRP"
#
__name__ = "OpenHRP"
_0_OpenHRP = omniORB.openModule("OpenHRP", r"idl/ModelLoader.idl")
_0_OpenHRP__POA = omniORB.openModule("OpenHRP__POA", r"idl/ModelLoader.idl")


# struct TransformedShapeIndex
_0_OpenHRP.TransformedShapeIndex = omniORB.newEmptyClass()
class TransformedShapeIndex (omniORB.StructBase):
    _NP_RepositoryId = "IDL:OpenHRP/TransformedShapeIndex:1.0"

    def __init__(self, transformMatrix, inlinedShapeTransformMatrixIndex, shapeIndex):
        self.transformMatrix = transformMatrix
        self.inlinedShapeTransformMatrixIndex = inlinedShapeTransformMatrixIndex
        self.shapeIndex = shapeIndex

_0_OpenHRP.TransformedShapeIndex = TransformedShapeIndex
_0_OpenHRP._d_TransformedShapeIndex  = (omniORB.tcInternal.tv_struct, TransformedShapeIndex, TransformedShapeIndex._NP_RepositoryId, "TransformedShapeIndex", "transformMatrix", omniORB.typeMapping["IDL:OpenHRP/DblArray12:1.0"], "inlinedShapeTransformMatrixIndex", omniORB.tcInternal.tv_short, "shapeIndex", omniORB.tcInternal.tv_short)
_0_OpenHRP._tc_TransformedShapeIndex = omniORB.tcInternal.createTypeCode(_0_OpenHRP._d_TransformedShapeIndex)
omniORB.registerType(TransformedShapeIndex._NP_RepositoryId, _0_OpenHRP._d_TransformedShapeIndex, _0_OpenHRP._tc_TransformedShapeIndex)
del TransformedShapeIndex

# typedef ... TransformedShapeIndexSequence
class TransformedShapeIndexSequence:
    _NP_RepositoryId = "IDL:OpenHRP/TransformedShapeIndexSequence:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_OpenHRP.TransformedShapeIndexSequence = TransformedShapeIndexSequence
_0_OpenHRP._d_TransformedShapeIndexSequence  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/TransformedShapeIndex:1.0"], 0)
_0_OpenHRP._ad_TransformedShapeIndexSequence = (omniORB.tcInternal.tv_alias, TransformedShapeIndexSequence._NP_RepositoryId, "TransformedShapeIndexSequence", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/TransformedShapeIndex:1.0"], 0))
_0_OpenHRP._tc_TransformedShapeIndexSequence = omniORB.tcInternal.createTypeCode(_0_OpenHRP._ad_TransformedShapeIndexSequence)
omniORB.registerType(TransformedShapeIndexSequence._NP_RepositoryId, _0_OpenHRP._ad_TransformedShapeIndexSequence, _0_OpenHRP._tc_TransformedShapeIndexSequence)
del TransformedShapeIndexSequence

# typedef ... AllLinkShapeIndexSequence
class AllLinkShapeIndexSequence:
    _NP_RepositoryId = "IDL:OpenHRP/AllLinkShapeIndexSequence:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_OpenHRP.AllLinkShapeIndexSequence = AllLinkShapeIndexSequence
_0_OpenHRP._d_AllLinkShapeIndexSequence  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/TransformedShapeIndexSequence:1.0"], 0)
_0_OpenHRP._ad_AllLinkShapeIndexSequence = (omniORB.tcInternal.tv_alias, AllLinkShapeIndexSequence._NP_RepositoryId, "AllLinkShapeIndexSequence", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/TransformedShapeIndexSequence:1.0"], 0))
_0_OpenHRP._tc_AllLinkShapeIndexSequence = omniORB.tcInternal.createTypeCode(_0_OpenHRP._ad_AllLinkShapeIndexSequence)
omniORB.registerType(AllLinkShapeIndexSequence._NP_RepositoryId, _0_OpenHRP._ad_AllLinkShapeIndexSequence, _0_OpenHRP._tc_AllLinkShapeIndexSequence)
del AllLinkShapeIndexSequence

# struct SensorInfo
_0_OpenHRP.SensorInfo = omniORB.newEmptyClass()
class SensorInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:OpenHRP/SensorInfo:1.0"

    def __init__(self, type, name, id, translation, rotation, specValues, specFile, shapeIndices, inlinedShapeTransformMatrices):
        self.type = type
        self.name = name
        self.id = id
        self.translation = translation
        self.rotation = rotation
        self.specValues = specValues
        self.specFile = specFile
        self.shapeIndices = shapeIndices
        self.inlinedShapeTransformMatrices = inlinedShapeTransformMatrices

_0_OpenHRP.SensorInfo = SensorInfo
_0_OpenHRP._d_SensorInfo  = (omniORB.tcInternal.tv_struct, SensorInfo, SensorInfo._NP_RepositoryId, "SensorInfo", "type", (omniORB.tcInternal.tv_string,0), "name", (omniORB.tcInternal.tv_string,0), "id", omniORB.tcInternal.tv_long, "translation", omniORB.typeMapping["IDL:OpenHRP/DblArray3:1.0"], "rotation", omniORB.typeMapping["IDL:OpenHRP/DblArray4:1.0"], "specValues", omniORB.typeMapping["IDL:OpenHRP/FloatSequence:1.0"], "specFile", (omniORB.tcInternal.tv_string,0), "shapeIndices", omniORB.typeMapping["IDL:OpenHRP/TransformedShapeIndexSequence:1.0"], "inlinedShapeTransformMatrices", omniORB.typeMapping["IDL:OpenHRP/DblArray12Sequence:1.0"])
_0_OpenHRP._tc_SensorInfo = omniORB.tcInternal.createTypeCode(_0_OpenHRP._d_SensorInfo)
omniORB.registerType(SensorInfo._NP_RepositoryId, _0_OpenHRP._d_SensorInfo, _0_OpenHRP._tc_SensorInfo)
del SensorInfo

# typedef ... SensorInfoSequence
class SensorInfoSequence:
    _NP_RepositoryId = "IDL:OpenHRP/SensorInfoSequence:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_OpenHRP.SensorInfoSequence = SensorInfoSequence
_0_OpenHRP._d_SensorInfoSequence  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/SensorInfo:1.0"], 0)
_0_OpenHRP._ad_SensorInfoSequence = (omniORB.tcInternal.tv_alias, SensorInfoSequence._NP_RepositoryId, "SensorInfoSequence", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/SensorInfo:1.0"], 0))
_0_OpenHRP._tc_SensorInfoSequence = omniORB.tcInternal.createTypeCode(_0_OpenHRP._ad_SensorInfoSequence)
omniORB.registerType(SensorInfoSequence._NP_RepositoryId, _0_OpenHRP._ad_SensorInfoSequence, _0_OpenHRP._tc_SensorInfoSequence)
del SensorInfoSequence

# struct HwcInfo
_0_OpenHRP.HwcInfo = omniORB.newEmptyClass()
class HwcInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:OpenHRP/HwcInfo:1.0"

    def __init__(self, name, id, translation, rotation, url, shapeIndices, inlinedShapeTransformMatrices):
        self.name = name
        self.id = id
        self.translation = translation
        self.rotation = rotation
        self.url = url
        self.shapeIndices = shapeIndices
        self.inlinedShapeTransformMatrices = inlinedShapeTransformMatrices

_0_OpenHRP.HwcInfo = HwcInfo
_0_OpenHRP._d_HwcInfo  = (omniORB.tcInternal.tv_struct, HwcInfo, HwcInfo._NP_RepositoryId, "HwcInfo", "name", (omniORB.tcInternal.tv_string,0), "id", omniORB.tcInternal.tv_long, "translation", omniORB.typeMapping["IDL:OpenHRP/DblArray3:1.0"], "rotation", omniORB.typeMapping["IDL:OpenHRP/DblArray4:1.0"], "url", (omniORB.tcInternal.tv_string,0), "shapeIndices", omniORB.typeMapping["IDL:OpenHRP/TransformedShapeIndexSequence:1.0"], "inlinedShapeTransformMatrices", omniORB.typeMapping["IDL:OpenHRP/DblArray12Sequence:1.0"])
_0_OpenHRP._tc_HwcInfo = omniORB.tcInternal.createTypeCode(_0_OpenHRP._d_HwcInfo)
omniORB.registerType(HwcInfo._NP_RepositoryId, _0_OpenHRP._d_HwcInfo, _0_OpenHRP._tc_HwcInfo)
del HwcInfo

# typedef ... HwcInfoSequence
class HwcInfoSequence:
    _NP_RepositoryId = "IDL:OpenHRP/HwcInfoSequence:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_OpenHRP.HwcInfoSequence = HwcInfoSequence
_0_OpenHRP._d_HwcInfoSequence  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/HwcInfo:1.0"], 0)
_0_OpenHRP._ad_HwcInfoSequence = (omniORB.tcInternal.tv_alias, HwcInfoSequence._NP_RepositoryId, "HwcInfoSequence", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/HwcInfo:1.0"], 0))
_0_OpenHRP._tc_HwcInfoSequence = omniORB.tcInternal.createTypeCode(_0_OpenHRP._ad_HwcInfoSequence)
omniORB.registerType(HwcInfoSequence._NP_RepositoryId, _0_OpenHRP._ad_HwcInfoSequence, _0_OpenHRP._tc_HwcInfoSequence)
del HwcInfoSequence

# enum LightType
_0_OpenHRP.POINT = omniORB.EnumItem("POINT", 0)
_0_OpenHRP.DIRECTIONAL = omniORB.EnumItem("DIRECTIONAL", 1)
_0_OpenHRP.SPOT = omniORB.EnumItem("SPOT", 2)
_0_OpenHRP.LightType = omniORB.Enum("IDL:OpenHRP/LightType:1.0", (_0_OpenHRP.POINT, _0_OpenHRP.DIRECTIONAL, _0_OpenHRP.SPOT,))

_0_OpenHRP._d_LightType  = (omniORB.tcInternal.tv_enum, _0_OpenHRP.LightType._NP_RepositoryId, "LightType", _0_OpenHRP.LightType._items)
_0_OpenHRP._tc_LightType = omniORB.tcInternal.createTypeCode(_0_OpenHRP._d_LightType)
omniORB.registerType(_0_OpenHRP.LightType._NP_RepositoryId, _0_OpenHRP._d_LightType, _0_OpenHRP._tc_LightType)

# struct LightInfo
_0_OpenHRP.LightInfo = omniORB.newEmptyClass()
class LightInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:OpenHRP/LightInfo:1.0"

    def __init__(self, name, type, transformMatrix, ambientIntensity, attenuation, color, intensity, location, on, radius, direction, beamWidth, cutOffAngle):
        self.name = name
        self.type = type
        self.transformMatrix = transformMatrix
        self.ambientIntensity = ambientIntensity
        self.attenuation = attenuation
        self.color = color
        self.intensity = intensity
        self.location = location
        self.on = on
        self.radius = radius
        self.direction = direction
        self.beamWidth = beamWidth
        self.cutOffAngle = cutOffAngle

_0_OpenHRP.LightInfo = LightInfo
_0_OpenHRP._d_LightInfo  = (omniORB.tcInternal.tv_struct, LightInfo, LightInfo._NP_RepositoryId, "LightInfo", "name", (omniORB.tcInternal.tv_string,0), "type", omniORB.typeMapping["IDL:OpenHRP/LightType:1.0"], "transformMatrix", omniORB.typeMapping["IDL:OpenHRP/DblArray12:1.0"], "ambientIntensity", omniORB.tcInternal.tv_double, "attenuation", omniORB.typeMapping["IDL:OpenHRP/DblArray3:1.0"], "color", omniORB.typeMapping["IDL:OpenHRP/DblArray3:1.0"], "intensity", omniORB.tcInternal.tv_double, "location", omniORB.typeMapping["IDL:OpenHRP/DblArray3:1.0"], "on", omniORB.tcInternal.tv_boolean, "radius", omniORB.tcInternal.tv_double, "direction", omniORB.typeMapping["IDL:OpenHRP/DblArray3:1.0"], "beamWidth", omniORB.tcInternal.tv_double, "cutOffAngle", omniORB.tcInternal.tv_double)
_0_OpenHRP._tc_LightInfo = omniORB.tcInternal.createTypeCode(_0_OpenHRP._d_LightInfo)
omniORB.registerType(LightInfo._NP_RepositoryId, _0_OpenHRP._d_LightInfo, _0_OpenHRP._tc_LightInfo)
del LightInfo

# typedef ... LightInfoSequence
class LightInfoSequence:
    _NP_RepositoryId = "IDL:OpenHRP/LightInfoSequence:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_OpenHRP.LightInfoSequence = LightInfoSequence
_0_OpenHRP._d_LightInfoSequence  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/LightInfo:1.0"], 0)
_0_OpenHRP._ad_LightInfoSequence = (omniORB.tcInternal.tv_alias, LightInfoSequence._NP_RepositoryId, "LightInfoSequence", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/LightInfo:1.0"], 0))
_0_OpenHRP._tc_LightInfoSequence = omniORB.tcInternal.createTypeCode(_0_OpenHRP._ad_LightInfoSequence)
omniORB.registerType(LightInfoSequence._NP_RepositoryId, _0_OpenHRP._ad_LightInfoSequence, _0_OpenHRP._tc_LightInfoSequence)
del LightInfoSequence

# struct SegmentInfo
_0_OpenHRP.SegmentInfo = omniORB.newEmptyClass()
class SegmentInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:OpenHRP/SegmentInfo:1.0"

    def __init__(self, name, mass, centerOfMass, inertia, transformMatrix, shapeIndices):
        self.name = name
        self.mass = mass
        self.centerOfMass = centerOfMass
        self.inertia = inertia
        self.transformMatrix = transformMatrix
        self.shapeIndices = shapeIndices

_0_OpenHRP.SegmentInfo = SegmentInfo
_0_OpenHRP._d_SegmentInfo  = (omniORB.tcInternal.tv_struct, SegmentInfo, SegmentInfo._NP_RepositoryId, "SegmentInfo", "name", (omniORB.tcInternal.tv_string,0), "mass", omniORB.tcInternal.tv_double, "centerOfMass", omniORB.typeMapping["IDL:OpenHRP/DblArray3:1.0"], "inertia", omniORB.typeMapping["IDL:OpenHRP/DblArray9:1.0"], "transformMatrix", omniORB.typeMapping["IDL:OpenHRP/DblArray12:1.0"], "shapeIndices", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_short, 0))
_0_OpenHRP._tc_SegmentInfo = omniORB.tcInternal.createTypeCode(_0_OpenHRP._d_SegmentInfo)
omniORB.registerType(SegmentInfo._NP_RepositoryId, _0_OpenHRP._d_SegmentInfo, _0_OpenHRP._tc_SegmentInfo)
del SegmentInfo

# typedef ... SegmentInfoSequence
class SegmentInfoSequence:
    _NP_RepositoryId = "IDL:OpenHRP/SegmentInfoSequence:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_OpenHRP.SegmentInfoSequence = SegmentInfoSequence
_0_OpenHRP._d_SegmentInfoSequence  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/SegmentInfo:1.0"], 0)
_0_OpenHRP._ad_SegmentInfoSequence = (omniORB.tcInternal.tv_alias, SegmentInfoSequence._NP_RepositoryId, "SegmentInfoSequence", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/SegmentInfo:1.0"], 0))
_0_OpenHRP._tc_SegmentInfoSequence = omniORB.tcInternal.createTypeCode(_0_OpenHRP._ad_SegmentInfoSequence)
omniORB.registerType(SegmentInfoSequence._NP_RepositoryId, _0_OpenHRP._ad_SegmentInfoSequence, _0_OpenHRP._tc_SegmentInfoSequence)
del SegmentInfoSequence

# struct LinkInfo
_0_OpenHRP.LinkInfo = omniORB.newEmptyClass()
class LinkInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:OpenHRP/LinkInfo:1.0"

    def __init__(self, name, jointId, jointType, jointValue, jointAxis, ulimit, llimit, uvlimit, lvlimit, climit, translation, rotation, mass, centerOfMass, inertia, rotorInertia, rotorResistor, gearRatio, torqueConst, encoderPulse, parentIndex, childIndices, shapeIndices, AABBmaxDepth, AABBmaxNum, inlinedShapeTransformMatrices, sensors, hwcs, segments, lights, specFiles):
        self.name = name
        self.jointId = jointId
        self.jointType = jointType
        self.jointValue = jointValue
        self.jointAxis = jointAxis
        self.ulimit = ulimit
        self.llimit = llimit
        self.uvlimit = uvlimit
        self.lvlimit = lvlimit
        self.climit = climit
        self.translation = translation
        self.rotation = rotation
        self.mass = mass
        self.centerOfMass = centerOfMass
        self.inertia = inertia
        self.rotorInertia = rotorInertia
        self.rotorResistor = rotorResistor
        self.gearRatio = gearRatio
        self.torqueConst = torqueConst
        self.encoderPulse = encoderPulse
        self.parentIndex = parentIndex
        self.childIndices = childIndices
        self.shapeIndices = shapeIndices
        self.AABBmaxDepth = AABBmaxDepth
        self.AABBmaxNum = AABBmaxNum
        self.inlinedShapeTransformMatrices = inlinedShapeTransformMatrices
        self.sensors = sensors
        self.hwcs = hwcs
        self.segments = segments
        self.lights = lights
        self.specFiles = specFiles

_0_OpenHRP.LinkInfo = LinkInfo
_0_OpenHRP._d_LinkInfo  = (omniORB.tcInternal.tv_struct, LinkInfo, LinkInfo._NP_RepositoryId, "LinkInfo", "name", (omniORB.tcInternal.tv_string,0), "jointId", omniORB.tcInternal.tv_short, "jointType", (omniORB.tcInternal.tv_string,0), "jointValue", omniORB.tcInternal.tv_double, "jointAxis", omniORB.typeMapping["IDL:OpenHRP/DblArray3:1.0"], "ulimit", omniORB.typeMapping["IDL:OpenHRP/DblSequence:1.0"], "llimit", omniORB.typeMapping["IDL:OpenHRP/DblSequence:1.0"], "uvlimit", omniORB.typeMapping["IDL:OpenHRP/DblSequence:1.0"], "lvlimit", omniORB.typeMapping["IDL:OpenHRP/DblSequence:1.0"], "climit", omniORB.typeMapping["IDL:OpenHRP/DblSequence:1.0"], "translation", omniORB.typeMapping["IDL:OpenHRP/DblArray3:1.0"], "rotation", omniORB.typeMapping["IDL:OpenHRP/DblArray4:1.0"], "mass", omniORB.tcInternal.tv_double, "centerOfMass", omniORB.typeMapping["IDL:OpenHRP/DblArray3:1.0"], "inertia", omniORB.typeMapping["IDL:OpenHRP/DblArray9:1.0"], "rotorInertia", omniORB.tcInternal.tv_double, "rotorResistor", omniORB.tcInternal.tv_double, "gearRatio", omniORB.tcInternal.tv_double, "torqueConst", omniORB.tcInternal.tv_double, "encoderPulse", omniORB.tcInternal.tv_double, "parentIndex", omniORB.tcInternal.tv_short, "childIndices", omniORB.typeMapping["IDL:OpenHRP/ShortSequence:1.0"], "shapeIndices", omniORB.typeMapping["IDL:OpenHRP/TransformedShapeIndexSequence:1.0"], "AABBmaxDepth", omniORB.tcInternal.tv_short, "AABBmaxNum", omniORB.tcInternal.tv_short, "inlinedShapeTransformMatrices", omniORB.typeMapping["IDL:OpenHRP/DblArray12Sequence:1.0"], "sensors", omniORB.typeMapping["IDL:OpenHRP/SensorInfoSequence:1.0"], "hwcs", omniORB.typeMapping["IDL:OpenHRP/HwcInfoSequence:1.0"], "segments", omniORB.typeMapping["IDL:OpenHRP/SegmentInfoSequence:1.0"], "lights", omniORB.typeMapping["IDL:OpenHRP/LightInfoSequence:1.0"], "specFiles", omniORB.typeMapping["IDL:OpenHRP/StringSequence:1.0"])
_0_OpenHRP._tc_LinkInfo = omniORB.tcInternal.createTypeCode(_0_OpenHRP._d_LinkInfo)
omniORB.registerType(LinkInfo._NP_RepositoryId, _0_OpenHRP._d_LinkInfo, _0_OpenHRP._tc_LinkInfo)
del LinkInfo

# typedef ... LinkInfoSequence
class LinkInfoSequence:
    _NP_RepositoryId = "IDL:OpenHRP/LinkInfoSequence:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_OpenHRP.LinkInfoSequence = LinkInfoSequence
_0_OpenHRP._d_LinkInfoSequence  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/LinkInfo:1.0"], 0)
_0_OpenHRP._ad_LinkInfoSequence = (omniORB.tcInternal.tv_alias, LinkInfoSequence._NP_RepositoryId, "LinkInfoSequence", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/LinkInfo:1.0"], 0))
_0_OpenHRP._tc_LinkInfoSequence = omniORB.tcInternal.createTypeCode(_0_OpenHRP._ad_LinkInfoSequence)
omniORB.registerType(LinkInfoSequence._NP_RepositoryId, _0_OpenHRP._ad_LinkInfoSequence, _0_OpenHRP._tc_LinkInfoSequence)
del LinkInfoSequence

# enum ShapePrimitiveType
_0_OpenHRP.SP_MESH = omniORB.EnumItem("SP_MESH", 0)
_0_OpenHRP.SP_BOX = omniORB.EnumItem("SP_BOX", 1)
_0_OpenHRP.SP_CYLINDER = omniORB.EnumItem("SP_CYLINDER", 2)
_0_OpenHRP.SP_CONE = omniORB.EnumItem("SP_CONE", 3)
_0_OpenHRP.SP_SPHERE = omniORB.EnumItem("SP_SPHERE", 4)
_0_OpenHRP.SP_PLANE = omniORB.EnumItem("SP_PLANE", 5)
_0_OpenHRP.ShapePrimitiveType = omniORB.Enum("IDL:OpenHRP/ShapePrimitiveType:1.0", (_0_OpenHRP.SP_MESH, _0_OpenHRP.SP_BOX, _0_OpenHRP.SP_CYLINDER, _0_OpenHRP.SP_CONE, _0_OpenHRP.SP_SPHERE, _0_OpenHRP.SP_PLANE,))

_0_OpenHRP._d_ShapePrimitiveType  = (omniORB.tcInternal.tv_enum, _0_OpenHRP.ShapePrimitiveType._NP_RepositoryId, "ShapePrimitiveType", _0_OpenHRP.ShapePrimitiveType._items)
_0_OpenHRP._tc_ShapePrimitiveType = omniORB.tcInternal.createTypeCode(_0_OpenHRP._d_ShapePrimitiveType)
omniORB.registerType(_0_OpenHRP.ShapePrimitiveType._NP_RepositoryId, _0_OpenHRP._d_ShapePrimitiveType, _0_OpenHRP._tc_ShapePrimitiveType)

# struct ShapeInfo
_0_OpenHRP.ShapeInfo = omniORB.newEmptyClass()
class ShapeInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:OpenHRP/ShapeInfo:1.0"

    def __init__(self, url, primitiveType, primitiveParameters, vertices, triangles, appearanceIndex):
        self.url = url
        self.primitiveType = primitiveType
        self.primitiveParameters = primitiveParameters
        self.vertices = vertices
        self.triangles = triangles
        self.appearanceIndex = appearanceIndex

_0_OpenHRP.ShapeInfo = ShapeInfo
_0_OpenHRP._d_ShapeInfo  = (omniORB.tcInternal.tv_struct, ShapeInfo, ShapeInfo._NP_RepositoryId, "ShapeInfo", "url", (omniORB.tcInternal.tv_string,0), "primitiveType", omniORB.typeMapping["IDL:OpenHRP/ShapePrimitiveType:1.0"], "primitiveParameters", omniORB.typeMapping["IDL:OpenHRP/FloatSequence:1.0"], "vertices", omniORB.typeMapping["IDL:OpenHRP/FloatSequence:1.0"], "triangles", omniORB.typeMapping["IDL:OpenHRP/LongSequence:1.0"], "appearanceIndex", omniORB.tcInternal.tv_long)
_0_OpenHRP._tc_ShapeInfo = omniORB.tcInternal.createTypeCode(_0_OpenHRP._d_ShapeInfo)
omniORB.registerType(ShapeInfo._NP_RepositoryId, _0_OpenHRP._d_ShapeInfo, _0_OpenHRP._tc_ShapeInfo)
del ShapeInfo

# typedef ... ShapeInfoSequence
class ShapeInfoSequence:
    _NP_RepositoryId = "IDL:OpenHRP/ShapeInfoSequence:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_OpenHRP.ShapeInfoSequence = ShapeInfoSequence
_0_OpenHRP._d_ShapeInfoSequence  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/ShapeInfo:1.0"], 0)
_0_OpenHRP._ad_ShapeInfoSequence = (omniORB.tcInternal.tv_alias, ShapeInfoSequence._NP_RepositoryId, "ShapeInfoSequence", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/ShapeInfo:1.0"], 0))
_0_OpenHRP._tc_ShapeInfoSequence = omniORB.tcInternal.createTypeCode(_0_OpenHRP._ad_ShapeInfoSequence)
omniORB.registerType(ShapeInfoSequence._NP_RepositoryId, _0_OpenHRP._ad_ShapeInfoSequence, _0_OpenHRP._tc_ShapeInfoSequence)
del ShapeInfoSequence

# struct AppearanceInfo
_0_OpenHRP.AppearanceInfo = omniORB.newEmptyClass()
class AppearanceInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:OpenHRP/AppearanceInfo:1.0"

    def __init__(self, materialIndex, normals, normalIndices, normalPerVertex, solid, creaseAngle, colors, colorIndices, colorPerVertex, textureIndex, textureCoordinate, textureCoordIndices, textransformMatrix):
        self.materialIndex = materialIndex
        self.normals = normals
        self.normalIndices = normalIndices
        self.normalPerVertex = normalPerVertex
        self.solid = solid
        self.creaseAngle = creaseAngle
        self.colors = colors
        self.colorIndices = colorIndices
        self.colorPerVertex = colorPerVertex
        self.textureIndex = textureIndex
        self.textureCoordinate = textureCoordinate
        self.textureCoordIndices = textureCoordIndices
        self.textransformMatrix = textransformMatrix

_0_OpenHRP.AppearanceInfo = AppearanceInfo
_0_OpenHRP._d_AppearanceInfo  = (omniORB.tcInternal.tv_struct, AppearanceInfo, AppearanceInfo._NP_RepositoryId, "AppearanceInfo", "materialIndex", omniORB.tcInternal.tv_long, "normals", omniORB.typeMapping["IDL:OpenHRP/FloatSequence:1.0"], "normalIndices", omniORB.typeMapping["IDL:OpenHRP/LongSequence:1.0"], "normalPerVertex", omniORB.tcInternal.tv_boolean, "solid", omniORB.tcInternal.tv_boolean, "creaseAngle", omniORB.tcInternal.tv_float, "colors", omniORB.typeMapping["IDL:OpenHRP/FloatSequence:1.0"], "colorIndices", omniORB.typeMapping["IDL:OpenHRP/LongSequence:1.0"], "colorPerVertex", omniORB.tcInternal.tv_boolean, "textureIndex", omniORB.tcInternal.tv_long, "textureCoordinate", omniORB.typeMapping["IDL:OpenHRP/FloatSequence:1.0"], "textureCoordIndices", omniORB.typeMapping["IDL:OpenHRP/LongSequence:1.0"], "textransformMatrix", omniORB.typeMapping["IDL:OpenHRP/DblArray9:1.0"])
_0_OpenHRP._tc_AppearanceInfo = omniORB.tcInternal.createTypeCode(_0_OpenHRP._d_AppearanceInfo)
omniORB.registerType(AppearanceInfo._NP_RepositoryId, _0_OpenHRP._d_AppearanceInfo, _0_OpenHRP._tc_AppearanceInfo)
del AppearanceInfo

# typedef ... AppearanceInfoSequence
class AppearanceInfoSequence:
    _NP_RepositoryId = "IDL:OpenHRP/AppearanceInfoSequence:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_OpenHRP.AppearanceInfoSequence = AppearanceInfoSequence
_0_OpenHRP._d_AppearanceInfoSequence  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/AppearanceInfo:1.0"], 0)
_0_OpenHRP._ad_AppearanceInfoSequence = (omniORB.tcInternal.tv_alias, AppearanceInfoSequence._NP_RepositoryId, "AppearanceInfoSequence", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/AppearanceInfo:1.0"], 0))
_0_OpenHRP._tc_AppearanceInfoSequence = omniORB.tcInternal.createTypeCode(_0_OpenHRP._ad_AppearanceInfoSequence)
omniORB.registerType(AppearanceInfoSequence._NP_RepositoryId, _0_OpenHRP._ad_AppearanceInfoSequence, _0_OpenHRP._tc_AppearanceInfoSequence)
del AppearanceInfoSequence

# struct MaterialInfo
_0_OpenHRP.MaterialInfo = omniORB.newEmptyClass()
class MaterialInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:OpenHRP/MaterialInfo:1.0"

    def __init__(self, ambientIntensity, diffuseColor, emissiveColor, shininess, specularColor, transparency):
        self.ambientIntensity = ambientIntensity
        self.diffuseColor = diffuseColor
        self.emissiveColor = emissiveColor
        self.shininess = shininess
        self.specularColor = specularColor
        self.transparency = transparency

_0_OpenHRP.MaterialInfo = MaterialInfo
_0_OpenHRP._d_MaterialInfo  = (omniORB.tcInternal.tv_struct, MaterialInfo, MaterialInfo._NP_RepositoryId, "MaterialInfo", "ambientIntensity", omniORB.tcInternal.tv_float, "diffuseColor", omniORB.typeMapping["IDL:OpenHRP/FloatArray3:1.0"], "emissiveColor", omniORB.typeMapping["IDL:OpenHRP/FloatArray3:1.0"], "shininess", omniORB.tcInternal.tv_float, "specularColor", omniORB.typeMapping["IDL:OpenHRP/FloatArray3:1.0"], "transparency", omniORB.tcInternal.tv_float)
_0_OpenHRP._tc_MaterialInfo = omniORB.tcInternal.createTypeCode(_0_OpenHRP._d_MaterialInfo)
omniORB.registerType(MaterialInfo._NP_RepositoryId, _0_OpenHRP._d_MaterialInfo, _0_OpenHRP._tc_MaterialInfo)
del MaterialInfo

# typedef ... MaterialInfoSequence
class MaterialInfoSequence:
    _NP_RepositoryId = "IDL:OpenHRP/MaterialInfoSequence:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_OpenHRP.MaterialInfoSequence = MaterialInfoSequence
_0_OpenHRP._d_MaterialInfoSequence  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/MaterialInfo:1.0"], 0)
_0_OpenHRP._ad_MaterialInfoSequence = (omniORB.tcInternal.tv_alias, MaterialInfoSequence._NP_RepositoryId, "MaterialInfoSequence", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/MaterialInfo:1.0"], 0))
_0_OpenHRP._tc_MaterialInfoSequence = omniORB.tcInternal.createTypeCode(_0_OpenHRP._ad_MaterialInfoSequence)
omniORB.registerType(MaterialInfoSequence._NP_RepositoryId, _0_OpenHRP._ad_MaterialInfoSequence, _0_OpenHRP._tc_MaterialInfoSequence)
del MaterialInfoSequence

# struct TextureInfo
_0_OpenHRP.TextureInfo = omniORB.newEmptyClass()
class TextureInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:OpenHRP/TextureInfo:1.0"

    def __init__(self, image, numComponents, width, height, repeatS, repeatT, url):
        self.image = image
        self.numComponents = numComponents
        self.width = width
        self.height = height
        self.repeatS = repeatS
        self.repeatT = repeatT
        self.url = url

_0_OpenHRP.TextureInfo = TextureInfo
_0_OpenHRP._d_TextureInfo  = (omniORB.tcInternal.tv_struct, TextureInfo, TextureInfo._NP_RepositoryId, "TextureInfo", "image", omniORB.typeMapping["IDL:OpenHRP/OctetSequence:1.0"], "numComponents", omniORB.tcInternal.tv_short, "width", omniORB.tcInternal.tv_short, "height", omniORB.tcInternal.tv_short, "repeatS", omniORB.tcInternal.tv_boolean, "repeatT", omniORB.tcInternal.tv_boolean, "url", (omniORB.tcInternal.tv_string,0))
_0_OpenHRP._tc_TextureInfo = omniORB.tcInternal.createTypeCode(_0_OpenHRP._d_TextureInfo)
omniORB.registerType(TextureInfo._NP_RepositoryId, _0_OpenHRP._d_TextureInfo, _0_OpenHRP._tc_TextureInfo)
del TextureInfo

# typedef ... TextureInfoSequence
class TextureInfoSequence:
    _NP_RepositoryId = "IDL:OpenHRP/TextureInfoSequence:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_OpenHRP.TextureInfoSequence = TextureInfoSequence
_0_OpenHRP._d_TextureInfoSequence  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/TextureInfo:1.0"], 0)
_0_OpenHRP._ad_TextureInfoSequence = (omniORB.tcInternal.tv_alias, TextureInfoSequence._NP_RepositoryId, "TextureInfoSequence", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/TextureInfo:1.0"], 0))
_0_OpenHRP._tc_TextureInfoSequence = omniORB.tcInternal.createTypeCode(_0_OpenHRP._ad_TextureInfoSequence)
omniORB.registerType(TextureInfoSequence._NP_RepositoryId, _0_OpenHRP._ad_TextureInfoSequence, _0_OpenHRP._tc_TextureInfoSequence)
del TextureInfoSequence

# struct ExtraJointInfo
_0_OpenHRP.ExtraJointInfo = omniORB.newEmptyClass()
class ExtraJointInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:OpenHRP/ExtraJointInfo:1.0"

    def __init__(self, name, jointType, axis, link, point):
        self.name = name
        self.jointType = jointType
        self.axis = axis
        self.link = link
        self.point = point

_0_OpenHRP.ExtraJointInfo = ExtraJointInfo
_0_OpenHRP._d_ExtraJointInfo  = (omniORB.tcInternal.tv_struct, ExtraJointInfo, ExtraJointInfo._NP_RepositoryId, "ExtraJointInfo", "name", (omniORB.tcInternal.tv_string,0), "jointType", omniORB.typeMapping["IDL:OpenHRP/ExtraJointType:1.0"], "axis", omniORB.typeMapping["IDL:OpenHRP/DblArray3:1.0"], "link", (omniORB.tcInternal.tv_array, (omniORB.tcInternal.tv_string,0), 2), "point", (omniORB.tcInternal.tv_array, omniORB.typeMapping["IDL:OpenHRP/DblArray3:1.0"], 2))
_0_OpenHRP._tc_ExtraJointInfo = omniORB.tcInternal.createTypeCode(_0_OpenHRP._d_ExtraJointInfo)
omniORB.registerType(ExtraJointInfo._NP_RepositoryId, _0_OpenHRP._d_ExtraJointInfo, _0_OpenHRP._tc_ExtraJointInfo)
del ExtraJointInfo

# typedef ... ExtraJointInfoSequence
class ExtraJointInfoSequence:
    _NP_RepositoryId = "IDL:OpenHRP/ExtraJointInfoSequence:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_OpenHRP.ExtraJointInfoSequence = ExtraJointInfoSequence
_0_OpenHRP._d_ExtraJointInfoSequence  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/ExtraJointInfo:1.0"], 0)
_0_OpenHRP._ad_ExtraJointInfoSequence = (omniORB.tcInternal.tv_alias, ExtraJointInfoSequence._NP_RepositoryId, "ExtraJointInfoSequence", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/ExtraJointInfo:1.0"], 0))
_0_OpenHRP._tc_ExtraJointInfoSequence = omniORB.tcInternal.createTypeCode(_0_OpenHRP._ad_ExtraJointInfoSequence)
omniORB.registerType(ExtraJointInfoSequence._NP_RepositoryId, _0_OpenHRP._ad_ExtraJointInfoSequence, _0_OpenHRP._tc_ExtraJointInfoSequence)
del ExtraJointInfoSequence

# interface ShapeSetInfo
_0_OpenHRP._d_ShapeSetInfo = (omniORB.tcInternal.tv_objref, "IDL:OpenHRP/ShapeSetInfo:1.0", "ShapeSetInfo")
omniORB.typeMapping["IDL:OpenHRP/ShapeSetInfo:1.0"] = _0_OpenHRP._d_ShapeSetInfo
_0_OpenHRP.ShapeSetInfo = omniORB.newEmptyClass()
class ShapeSetInfo :
    _NP_RepositoryId = _0_OpenHRP._d_ShapeSetInfo[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_OpenHRP.ShapeSetInfo = ShapeSetInfo
_0_OpenHRP._tc_ShapeSetInfo = omniORB.tcInternal.createTypeCode(_0_OpenHRP._d_ShapeSetInfo)
omniORB.registerType(ShapeSetInfo._NP_RepositoryId, _0_OpenHRP._d_ShapeSetInfo, _0_OpenHRP._tc_ShapeSetInfo)

# ShapeSetInfo operations and attributes
ShapeSetInfo._d__get_shapes = ((),(omniORB.typeMapping["IDL:OpenHRP/ShapeInfoSequence:1.0"],),None)
ShapeSetInfo._d__get_appearances = ((),(omniORB.typeMapping["IDL:OpenHRP/AppearanceInfoSequence:1.0"],),None)
ShapeSetInfo._d__get_materials = ((),(omniORB.typeMapping["IDL:OpenHRP/MaterialInfoSequence:1.0"],),None)
ShapeSetInfo._d__get_textures = ((),(omniORB.typeMapping["IDL:OpenHRP/TextureInfoSequence:1.0"],),None)

# ShapeSetInfo object reference
class _objref_ShapeSetInfo (CORBA.Object):
    _NP_RepositoryId = ShapeSetInfo._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def _get_shapes(self, *args):
        return _omnipy.invoke(self, "_get_shapes", _0_OpenHRP.ShapeSetInfo._d__get_shapes, args)

    def _get_appearances(self, *args):
        return _omnipy.invoke(self, "_get_appearances", _0_OpenHRP.ShapeSetInfo._d__get_appearances, args)

    def _get_materials(self, *args):
        return _omnipy.invoke(self, "_get_materials", _0_OpenHRP.ShapeSetInfo._d__get_materials, args)

    def _get_textures(self, *args):
        return _omnipy.invoke(self, "_get_textures", _0_OpenHRP.ShapeSetInfo._d__get_textures, args)

    __methods__ = ["_get_shapes", "_get_appearances", "_get_materials", "_get_textures"] + CORBA.Object.__methods__

omniORB.registerObjref(ShapeSetInfo._NP_RepositoryId, _objref_ShapeSetInfo)
_0_OpenHRP._objref_ShapeSetInfo = _objref_ShapeSetInfo
del ShapeSetInfo, _objref_ShapeSetInfo

# ShapeSetInfo skeleton
__name__ = "OpenHRP__POA"
class ShapeSetInfo (PortableServer.Servant):
    _NP_RepositoryId = _0_OpenHRP.ShapeSetInfo._NP_RepositoryId


    _omni_op_d = {"_get_shapes": _0_OpenHRP.ShapeSetInfo._d__get_shapes, "_get_appearances": _0_OpenHRP.ShapeSetInfo._d__get_appearances, "_get_materials": _0_OpenHRP.ShapeSetInfo._d__get_materials, "_get_textures": _0_OpenHRP.ShapeSetInfo._d__get_textures}

ShapeSetInfo._omni_skeleton = ShapeSetInfo
_0_OpenHRP__POA.ShapeSetInfo = ShapeSetInfo
omniORB.registerSkeleton(ShapeSetInfo._NP_RepositoryId, ShapeSetInfo)
del ShapeSetInfo
__name__ = "OpenHRP"

# interface BodyInfo
_0_OpenHRP._d_BodyInfo = (omniORB.tcInternal.tv_objref, "IDL:OpenHRP/BodyInfo:1.0", "BodyInfo")
omniORB.typeMapping["IDL:OpenHRP/BodyInfo:1.0"] = _0_OpenHRP._d_BodyInfo
_0_OpenHRP.BodyInfo = omniORB.newEmptyClass()
class BodyInfo (_0_OpenHRP.ShapeSetInfo):
    _NP_RepositoryId = _0_OpenHRP._d_BodyInfo[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_OpenHRP.BodyInfo = BodyInfo
_0_OpenHRP._tc_BodyInfo = omniORB.tcInternal.createTypeCode(_0_OpenHRP._d_BodyInfo)
omniORB.registerType(BodyInfo._NP_RepositoryId, _0_OpenHRP._d_BodyInfo, _0_OpenHRP._tc_BodyInfo)

# BodyInfo operations and attributes
BodyInfo._d__get_name = ((),((omniORB.tcInternal.tv_string,0),),None)
BodyInfo._d__get_url = ((),((omniORB.tcInternal.tv_string,0),),None)
BodyInfo._d__get_info = ((),(omniORB.typeMapping["IDL:OpenHRP/StringSequence:1.0"],),None)
BodyInfo._d__get_links = ((),(omniORB.typeMapping["IDL:OpenHRP/LinkInfoSequence:1.0"],),None)
BodyInfo._d__get_linkShapeIndices = ((),(omniORB.typeMapping["IDL:OpenHRP/AllLinkShapeIndexSequence:1.0"],),None)
BodyInfo._d__get_extraJoints = ((),(omniORB.typeMapping["IDL:OpenHRP/ExtraJointInfoSequence:1.0"],),None)

# BodyInfo object reference
class _objref_BodyInfo (_0_OpenHRP._objref_ShapeSetInfo):
    _NP_RepositoryId = BodyInfo._NP_RepositoryId

    def __init__(self):
        _0_OpenHRP._objref_ShapeSetInfo.__init__(self)

    def _get_name(self, *args):
        return _omnipy.invoke(self, "_get_name", _0_OpenHRP.BodyInfo._d__get_name, args)

    def _get_url(self, *args):
        return _omnipy.invoke(self, "_get_url", _0_OpenHRP.BodyInfo._d__get_url, args)

    def _get_info(self, *args):
        return _omnipy.invoke(self, "_get_info", _0_OpenHRP.BodyInfo._d__get_info, args)

    def _get_links(self, *args):
        return _omnipy.invoke(self, "_get_links", _0_OpenHRP.BodyInfo._d__get_links, args)

    def _get_linkShapeIndices(self, *args):
        return _omnipy.invoke(self, "_get_linkShapeIndices", _0_OpenHRP.BodyInfo._d__get_linkShapeIndices, args)

    def _get_extraJoints(self, *args):
        return _omnipy.invoke(self, "_get_extraJoints", _0_OpenHRP.BodyInfo._d__get_extraJoints, args)

    __methods__ = ["_get_name", "_get_url", "_get_info", "_get_links", "_get_linkShapeIndices", "_get_extraJoints"] + _0_OpenHRP._objref_ShapeSetInfo.__methods__

omniORB.registerObjref(BodyInfo._NP_RepositoryId, _objref_BodyInfo)
_0_OpenHRP._objref_BodyInfo = _objref_BodyInfo
del BodyInfo, _objref_BodyInfo

# BodyInfo skeleton
__name__ = "OpenHRP__POA"
class BodyInfo (_0_OpenHRP__POA.ShapeSetInfo):
    _NP_RepositoryId = _0_OpenHRP.BodyInfo._NP_RepositoryId


    _omni_op_d = {"_get_name": _0_OpenHRP.BodyInfo._d__get_name, "_get_url": _0_OpenHRP.BodyInfo._d__get_url, "_get_info": _0_OpenHRP.BodyInfo._d__get_info, "_get_links": _0_OpenHRP.BodyInfo._d__get_links, "_get_linkShapeIndices": _0_OpenHRP.BodyInfo._d__get_linkShapeIndices, "_get_extraJoints": _0_OpenHRP.BodyInfo._d__get_extraJoints}
    _omni_op_d.update(_0_OpenHRP__POA.ShapeSetInfo._omni_op_d)

BodyInfo._omni_skeleton = BodyInfo
_0_OpenHRP__POA.BodyInfo = BodyInfo
omniORB.registerSkeleton(BodyInfo._NP_RepositoryId, BodyInfo)
del BodyInfo
__name__ = "OpenHRP"

# interface SceneInfo
_0_OpenHRP._d_SceneInfo = (omniORB.tcInternal.tv_objref, "IDL:OpenHRP/SceneInfo:1.0", "SceneInfo")
omniORB.typeMapping["IDL:OpenHRP/SceneInfo:1.0"] = _0_OpenHRP._d_SceneInfo
_0_OpenHRP.SceneInfo = omniORB.newEmptyClass()
class SceneInfo (_0_OpenHRP.ShapeSetInfo):
    _NP_RepositoryId = _0_OpenHRP._d_SceneInfo[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_OpenHRP.SceneInfo = SceneInfo
_0_OpenHRP._tc_SceneInfo = omniORB.tcInternal.createTypeCode(_0_OpenHRP._d_SceneInfo)
omniORB.registerType(SceneInfo._NP_RepositoryId, _0_OpenHRP._d_SceneInfo, _0_OpenHRP._tc_SceneInfo)

# SceneInfo operations and attributes
SceneInfo._d__get_url = ((),((omniORB.tcInternal.tv_string,0),),None)
SceneInfo._d__get_shapeIndices = ((),(omniORB.typeMapping["IDL:OpenHRP/TransformedShapeIndexSequence:1.0"],),None)

# SceneInfo object reference
class _objref_SceneInfo (_0_OpenHRP._objref_ShapeSetInfo):
    _NP_RepositoryId = SceneInfo._NP_RepositoryId

    def __init__(self):
        _0_OpenHRP._objref_ShapeSetInfo.__init__(self)

    def _get_url(self, *args):
        return _omnipy.invoke(self, "_get_url", _0_OpenHRP.SceneInfo._d__get_url, args)

    def _get_shapeIndices(self, *args):
        return _omnipy.invoke(self, "_get_shapeIndices", _0_OpenHRP.SceneInfo._d__get_shapeIndices, args)

    __methods__ = ["_get_url", "_get_shapeIndices"] + _0_OpenHRP._objref_ShapeSetInfo.__methods__

omniORB.registerObjref(SceneInfo._NP_RepositoryId, _objref_SceneInfo)
_0_OpenHRP._objref_SceneInfo = _objref_SceneInfo
del SceneInfo, _objref_SceneInfo

# SceneInfo skeleton
__name__ = "OpenHRP__POA"
class SceneInfo (_0_OpenHRP__POA.ShapeSetInfo):
    _NP_RepositoryId = _0_OpenHRP.SceneInfo._NP_RepositoryId


    _omni_op_d = {"_get_url": _0_OpenHRP.SceneInfo._d__get_url, "_get_shapeIndices": _0_OpenHRP.SceneInfo._d__get_shapeIndices}
    _omni_op_d.update(_0_OpenHRP__POA.ShapeSetInfo._omni_op_d)

SceneInfo._omni_skeleton = SceneInfo
_0_OpenHRP__POA.SceneInfo = SceneInfo
omniORB.registerSkeleton(SceneInfo._NP_RepositoryId, SceneInfo)
del SceneInfo
__name__ = "OpenHRP"

# interface ModelLoader
_0_OpenHRP._d_ModelLoader = (omniORB.tcInternal.tv_objref, "IDL:OpenHRP/ModelLoader:1.0", "ModelLoader")
omniORB.typeMapping["IDL:OpenHRP/ModelLoader:1.0"] = _0_OpenHRP._d_ModelLoader
_0_OpenHRP.ModelLoader = omniORB.newEmptyClass()
class ModelLoader (_0_OpenHRP.ServerObject):
    _NP_RepositoryId = _0_OpenHRP._d_ModelLoader[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    
    # exception ModelLoaderException
    _0_OpenHRP.ModelLoader.ModelLoaderException = omniORB.newEmptyClass()
    class ModelLoaderException (CORBA.UserException):
        _NP_RepositoryId = "IDL:OpenHRP/ModelLoader/ModelLoaderException:1.0"

        _NP_ClassName = "OpenHRP.ModelLoader.ModelLoaderException"

        def __init__(self, description):
            CORBA.UserException.__init__(self, description)
            self.description = description
    
    _d_ModelLoaderException  = (omniORB.tcInternal.tv_except, ModelLoaderException, ModelLoaderException._NP_RepositoryId, "ModelLoaderException", "description", (omniORB.tcInternal.tv_string,0))
    _tc_ModelLoaderException = omniORB.tcInternal.createTypeCode(_d_ModelLoaderException)
    omniORB.registerType(ModelLoaderException._NP_RepositoryId, _d_ModelLoaderException, _tc_ModelLoaderException)
    
    # enum AABBdataType
    AABB_DEPTH = omniORB.EnumItem("AABB_DEPTH", 0)
    AABB_NUM = omniORB.EnumItem("AABB_NUM", 1)
    AABBdataType = omniORB.Enum("IDL:OpenHRP/ModelLoader/AABBdataType:1.0", (AABB_DEPTH, AABB_NUM,))

    _d_AABBdataType  = (omniORB.tcInternal.tv_enum, AABBdataType._NP_RepositoryId, "AABBdataType", AABBdataType._items)
    _tc_AABBdataType = omniORB.tcInternal.createTypeCode(_d_AABBdataType)
    omniORB.registerType(AABBdataType._NP_RepositoryId, _d_AABBdataType, _tc_AABBdataType)
    
    # struct ModelLoadOption
    _0_OpenHRP.ModelLoader.ModelLoadOption = omniORB.newEmptyClass()
    class ModelLoadOption (omniORB.StructBase):
        _NP_RepositoryId = "IDL:OpenHRP/ModelLoader/ModelLoadOption:1.0"

        _NP_ClassName = "OpenHRP.ModelLoader.ModelLoadOption"

        def __init__(self, readImage, AABBdata, AABBtype):
            self.readImage = readImage
            self.AABBdata = AABBdata
            self.AABBtype = AABBtype
    
    _d_ModelLoadOption  = _0_OpenHRP.ModelLoader._d_ModelLoadOption = (omniORB.tcInternal.tv_struct, ModelLoadOption, ModelLoadOption._NP_RepositoryId, "ModelLoadOption", "readImage", omniORB.tcInternal.tv_boolean, "AABBdata", omniORB.typeMapping["IDL:OpenHRP/ShortSequence:1.0"], "AABBtype", omniORB.typeMapping["IDL:OpenHRP/ModelLoader/AABBdataType:1.0"])
    _tc_ModelLoadOption = omniORB.tcInternal.createTypeCode(_d_ModelLoadOption)
    omniORB.registerType(ModelLoadOption._NP_RepositoryId, _d_ModelLoadOption, _tc_ModelLoadOption)


_0_OpenHRP.ModelLoader = ModelLoader
_0_OpenHRP._tc_ModelLoader = omniORB.tcInternal.createTypeCode(_0_OpenHRP._d_ModelLoader)
omniORB.registerType(ModelLoader._NP_RepositoryId, _0_OpenHRP._d_ModelLoader, _0_OpenHRP._tc_ModelLoader)

# ModelLoader operations and attributes
ModelLoader._d_getBodyInfo = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:OpenHRP/BodyInfo:1.0"], ), {_0_OpenHRP.ModelLoader.ModelLoaderException._NP_RepositoryId: _0_OpenHRP.ModelLoader._d_ModelLoaderException})
ModelLoader._d_getBodyInfoEx = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:OpenHRP/ModelLoader/ModelLoadOption:1.0"]), (omniORB.typeMapping["IDL:OpenHRP/BodyInfo:1.0"], ), {_0_OpenHRP.ModelLoader.ModelLoaderException._NP_RepositoryId: _0_OpenHRP.ModelLoader._d_ModelLoaderException})
ModelLoader._d_loadBodyInfo = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:OpenHRP/BodyInfo:1.0"], ), {_0_OpenHRP.ModelLoader.ModelLoaderException._NP_RepositoryId: _0_OpenHRP.ModelLoader._d_ModelLoaderException})
ModelLoader._d_loadBodyInfoEx = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:OpenHRP/ModelLoader/ModelLoadOption:1.0"]), (omniORB.typeMapping["IDL:OpenHRP/BodyInfo:1.0"], ), {_0_OpenHRP.ModelLoader.ModelLoaderException._NP_RepositoryId: _0_OpenHRP.ModelLoader._d_ModelLoaderException})
ModelLoader._d_loadSceneInfo = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:OpenHRP/SceneInfo:1.0"], ), {_0_OpenHRP.ModelLoader.ModelLoaderException._NP_RepositoryId: _0_OpenHRP.ModelLoader._d_ModelLoaderException})
ModelLoader._d_clearData = ((), (), None)

# ModelLoader object reference
class _objref_ModelLoader (_0_OpenHRP._objref_ServerObject):
    _NP_RepositoryId = ModelLoader._NP_RepositoryId

    def __init__(self):
        _0_OpenHRP._objref_ServerObject.__init__(self)

    def getBodyInfo(self, *args):
        return _omnipy.invoke(self, "getBodyInfo", _0_OpenHRP.ModelLoader._d_getBodyInfo, args)

    def getBodyInfoEx(self, *args):
        return _omnipy.invoke(self, "getBodyInfoEx", _0_OpenHRP.ModelLoader._d_getBodyInfoEx, args)

    def loadBodyInfo(self, *args):
        return _omnipy.invoke(self, "loadBodyInfo", _0_OpenHRP.ModelLoader._d_loadBodyInfo, args)

    def loadBodyInfoEx(self, *args):
        return _omnipy.invoke(self, "loadBodyInfoEx", _0_OpenHRP.ModelLoader._d_loadBodyInfoEx, args)

    def loadSceneInfo(self, *args):
        return _omnipy.invoke(self, "loadSceneInfo", _0_OpenHRP.ModelLoader._d_loadSceneInfo, args)

    def clearData(self, *args):
        return _omnipy.invoke(self, "clearData", _0_OpenHRP.ModelLoader._d_clearData, args)

    __methods__ = ["getBodyInfo", "getBodyInfoEx", "loadBodyInfo", "loadBodyInfoEx", "loadSceneInfo", "clearData"] + _0_OpenHRP._objref_ServerObject.__methods__

omniORB.registerObjref(ModelLoader._NP_RepositoryId, _objref_ModelLoader)
_0_OpenHRP._objref_ModelLoader = _objref_ModelLoader
del ModelLoader, _objref_ModelLoader

# ModelLoader skeleton
__name__ = "OpenHRP__POA"
class ModelLoader (_0_OpenHRP__POA.ServerObject):
    _NP_RepositoryId = _0_OpenHRP.ModelLoader._NP_RepositoryId


    _omni_op_d = {"getBodyInfo": _0_OpenHRP.ModelLoader._d_getBodyInfo, "getBodyInfoEx": _0_OpenHRP.ModelLoader._d_getBodyInfoEx, "loadBodyInfo": _0_OpenHRP.ModelLoader._d_loadBodyInfo, "loadBodyInfoEx": _0_OpenHRP.ModelLoader._d_loadBodyInfoEx, "loadSceneInfo": _0_OpenHRP.ModelLoader._d_loadSceneInfo, "clearData": _0_OpenHRP.ModelLoader._d_clearData}
    _omni_op_d.update(_0_OpenHRP__POA.ServerObject._omni_op_d)

ModelLoader._omni_skeleton = ModelLoader
_0_OpenHRP__POA.ModelLoader = ModelLoader
omniORB.registerSkeleton(ModelLoader._NP_RepositoryId, ModelLoader)
del ModelLoader
__name__ = "OpenHRP"

#
# End of module "OpenHRP"
#
__name__ = "ModelLoader_idl"

_exported_modules = ( "OpenHRP", )

# The end.
