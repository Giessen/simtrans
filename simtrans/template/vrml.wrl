#VRML V2.0 utf8

PROTO Joint [
  exposedField     SFVec3f      center              0 0 0
  exposedField     MFNode       children            []
  exposedField     MFFloat      llimit              []
  exposedField     MFFloat      lvlimit             []
  exposedField     SFRotation   limitOrientation    0 0 1 0
  exposedField     SFString     name                ""
  exposedField     SFRotation   rotation            0 0 1 0
  exposedField     SFVec3f      scale               1 1 1
  exposedField     SFRotation   scaleOrientation    0 0 1 0
  exposedField     MFFloat      stiffness           [ 0 0 0 ]
  exposedField     SFVec3f      translation         0 0 0
  exposedField     MFFloat      ulimit              []
  exposedField     MFFloat      uvlimit             []
  exposedField     SFString     jointType           ""
  exposedField     SFInt32      jointId             -1
  exposedField     SFVec3f      jointAxis           0 0 1

  exposedField     SFFloat      gearRatio           1
  exposedField     SFFloat      rotorInertia        0
  exposedField     SFFloat      rotorResistor       0
  exposedField     SFFloat      torqueConst         1
  exposedField     SFFloat      encoderPulse        1
]
{
  Transform {
    center           IS center
    children         IS children
    rotation         IS rotation
    scale            IS scale
    scaleOrientation IS scaleOrientation
    translation      IS translation
  }
}

PROTO Segment [
  field           SFVec3f     bboxCenter        0 0 0
  field           SFVec3f     bboxSize          -1 -1 -1
  exposedField    SFVec3f     centerOfMass      0 0 0
  exposedField    MFNode      children          [ ]
  exposedField    SFNode      coord             NULL
  exposedField    MFNode      displacers        [ ]
  exposedField    SFFloat     mass              0
  exposedField    MFFloat     momentsOfInertia  [ 0 0 0 0 0 0 0 0 0 ]
  exposedField    SFString    name              ""
  eventIn         MFNode      addChildren
  eventIn         MFNode      removeChildren
]
{
  Group {
    addChildren    IS addChildren
    bboxCenter     IS bboxCenter
    bboxSize       IS bboxSize
    children       IS children
    removeChildren IS removeChildren
  }
}

PROTO Humanoid [
  field           SFVec3f    bboxCenter            0 0 0
  field           SFVec3f    bboxSize              -1 -1 -1
  exposedField    SFVec3f    center                0 0 0
  exposedField    MFNode     humanoidBody          [ ]
  exposedField    MFString   info                  [ ]
  exposedField    MFNode     joints                [ ]
  exposedField    SFString   name                  ""
  exposedField    SFRotation rotation              0 0 1 0
  exposedField    SFVec3f    scale                 1 1 1
  exposedField    SFRotation scaleOrientation      0 0 1 0
  exposedField    MFNode     segments              [ ]
  exposedField    MFNode     sites                 [ ]
  exposedField    SFVec3f    translation           0 0 0
  exposedField    SFString   version               "1.1"
  exposedField    MFNode     viewpoints            [ ]
]
{
  Transform {
    bboxCenter       IS bboxCenter
    bboxSize         IS bboxSize
    center           IS center
    rotation         IS rotation
    scale            IS scale
    scaleOrientation IS scaleOrientation
    translation      IS translation
    children [
      Group {
        children IS viewpoints
      }
    ]
  }
}

PROTO ExtraJoint [
  exposedField SFString link1Name ""
  exposedField SFString link2Name ""
  exposedField SFVec3f  link1LocalPos 0 0 0
  exposedField SFVec3f  link2LocalPos 0 0 0
  exposedField SFString jointType "xyz"
  exposedField SFVec3f  jointAxis 1 0 0
]
{
}

{%- for j in model.extrajoints %}
DEF {{j.name}} ExtraJoint {
  link1Name "{{j.link1}}"
  link2Name "{{j.link2}}"
  link1LocalPos {{j.trans1[0]}} {{j.trans1[1]}} {{j.trans1[2]}}
  link2LocalPos {{j.trans2[0]}} {{j.trans2[1]}} {{j.trans2[2]}}
  jointType "{{j.jointType}}"
  jointAxis {{j.jointAxis[0]}} {{j.jointAxis[1]}} {{j.jointAxis[2]}}
}
{%- endfor %}

DEF {{model.name}} Humanoid {
  humanoidBody [
    {%- for l in model.children recursive %}
    {%- if l.link and (l.link.visuals|length or l.link.collisions|length or l.children|length) %}
    {%- set shapes = l.link.visuals %}
    {%- if options.usecollision %}
    {%- set shapes = l.link.collisions %}
    {%- endif %}
    DEF {{l.joint.name}} Joint {
      jointType "{{l.jointtype}}"
      {%- if l.joint.axis %}
      jointAxis {{l.joint.axis[0]}} {{l.joint.axis[1]}} {{l.joint.axis[2]}}
      {%- endif %}
      jointId {{jointmap[l.joint.name]}}
      {%- set trans = l.joint.gettranslation() %}
      translation {{trans[0]}} {{trans[1]}} {{trans[2]}}
      {%- set angle = l.joint.getangle() %}
      rotation {{angle[0][0]}} {{angle[0][1]}} {{angle[0][2]}} {{angle[1]}}
      {%- if l.joint.limit %}
      ulimit {{l.joint.limit[0]}}
      llimit {{l.joint.limit[1]}}
      {%- endif %}
      {%- if l.joint.velocitylimit %}
      uvlimit {{l.joint.velocitylimit[0]}}
      lvlimit {{l.joint.velocitylimit[1]}}
      {%- endif %}
      children [
        DEF {{l.link.name}} Segment {
          mass {{l.link.mass}}
          centerOfMass {{l.link.centerofmass[0]}} {{l.link.centerofmass[1]}} {{l.link.centerofmass[2]}}
          momentsOfInertia [{{l.link.inertia[0][0]}} {{l.link.inertia[0][1]}} {{l.link.inertia[0][2]}} {{l.link.inertia[1][0]}} {{l.link.inertia[1][1]}} {{l.link.inertia[1][2]}} {{l.link.inertia[2][0]}} {{l.link.inertia[2][1]}} {{l.link.inertia[2][2]}}]
          children [
            {%- for v in shapes %}
            Transform {
              {%- set scale = v.getscale() %}
              scale {{scale[0]}} {{scale[1]}} {{scale[2]}}
              {%- set trans = v.gettranslation() %}
              translation {{trans[0]}} {{trans[1]}} {{trans[2]}}
              {%- set angle = v.getangle() %}
              rotation {{angle[0][0]}} {{angle[0][1]}} {{angle[0][2]}} {{angle[1]}}
              children [
                {%- if v.shapeType == ShapeModel.SP_MESH %}
                Inline {
                  url "{{body.name}}-{{l.link.name}}-{{v.name}}.wrl"
                }
                {%- elif v.shapeType == ShapeModel.SP_SPHERE %}
                Shape {
                  geometry Sphere {
                    radius {{v.data.radius}}
                  }
                }
                {%- elif v.shapeType == ShapeModel.SP_BOX %}
                Shape {
                  geometry Box {
                    size {{v.data.x}} {{v.data.y}} {{v.data.z}}
                  }
                }
                {%- elif v.shapeType == ShapeModel.SP_CYLINDER %}
                Shape {
                  geometry Cylinder {
                    radius {{v.data.radius}}
                    height {{v.data.height}}
                  }
                }
                {%- endif %}
              ]
            }
            {%- endfor %}
          ]
        }
        {{ loop(l.children)|indent(4, True) }}
      ]
    }
    {%- endif %}
    {%- endfor %}
  ]
  joints [
    {%- for j in joints %}
    USE {{j}}{%- if loop.last == False %},{%- endif %}
    {%- endfor %}
  ]
  segments [
    {%- for l in links %}
    USE {{l}}{%- if loop.last == False %},{%- endif %}
    {%- endfor %}
  ]
  name "{{model.name}}"
  version "1.0"
}
