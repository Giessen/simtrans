#VRML V2.0 utf8

PROTO Joint [
  exposedField     SFVec3f      center              0 0 0
  exposedField     MFNode       children            []
  exposedField     MFFloat      llimit              []
  exposedField     MFFloat      lvlimit             []
  exposedField     SFRotation   limitOrientation    0 0 1 0
  exposedField     SFString     name                ""
  exposedField     SFRotation   rotation            0 0 1 0
  exposedField     SFVec3f      scale               1 1 1
  exposedField     SFRotation   scaleOrientation    0 0 1 0
  exposedField     MFFloat      stiffness           [ 0 0 0 ]
  exposedField     SFVec3f      translation         0 0 0
  exposedField     MFFloat      ulimit              []
  exposedField     MFFloat      uvlimit             []
  exposedField     SFString     jointType           ""
  exposedField     SFInt32      jointId             -1
  exposedField     SFVec3f      jointAxis           0 0 1

  exposedField     SFFloat      gearRatio           1
  exposedField     SFFloat      rotorInertia        0
  exposedField     SFFloat      rotorResistor       0
  exposedField     SFFloat      torqueConst         1
  exposedField     SFFloat      encoderPulse        1
]
{
  Transform {
    center           IS center
    children         IS children
    rotation         IS rotation
    scale            IS scale
    scaleOrientation IS scaleOrientation
    translation      IS translation
  }
}

PROTO Segment [
  field           SFVec3f     bboxCenter        0 0 0
  field           SFVec3f     bboxSize          -1 -1 -1
  exposedField    SFVec3f     centerOfMass      0 0 0
  exposedField    MFNode      children          [ ]
  exposedField    SFNode      coord             NULL
  exposedField    MFNode      displacers        [ ]
  exposedField    SFFloat     mass              0
  exposedField    MFFloat     momentsOfInertia  [ 0 0 0 0 0 0 0 0 0 ]
  exposedField    SFString    name              ""
  eventIn         MFNode      addChildren
  eventIn         MFNode      removeChildren
]
{
  Group {
    addChildren    IS addChildren
    bboxCenter     IS bboxCenter
    bboxSize       IS bboxSize
    children       IS children
    removeChildren IS removeChildren
  }
}

PROTO Humanoid [
  field           SFVec3f    bboxCenter            0 0 0
  field           SFVec3f    bboxSize              -1 -1 -1
  exposedField    SFVec3f    center                0 0 0
  exposedField    MFNode     humanoidBody          [ ]
  exposedField    MFString   info                  [ ]
  exposedField    MFNode     joints                [ ]
  exposedField    SFString   name                  ""
  exposedField    SFRotation rotation              0 0 1 0
  exposedField    SFVec3f    scale                 1 1 1
  exposedField    SFRotation scaleOrientation      0 0 1 0
  exposedField    MFNode     segments              [ ]
  exposedField    MFNode     sites                 [ ]
  exposedField    SFVec3f    translation           0 0 0
  exposedField    SFString   version               "1.1"
  exposedField    MFNode     viewpoints            [ ]
]
{
  Transform {
    bboxCenter       IS bboxCenter
    bboxSize         IS bboxSize
    center           IS center
    rotation         IS rotation
    scale            IS scale
    scaleOrientation IS scaleOrientation
    translation      IS translation
    children [
      Group {
        children IS viewpoints
      }
    ]
  }
}

PROTO ExtraJoint [
  exposedField SFString link1Name ""
  exposedField SFString link2Name ""
  exposedField SFVec3f  link1LocalPos 0 0 0
  exposedField SFVec3f  link2LocalPos 0 0 0
  exposedField SFString jointType "xyz"
  exposedField SFVec3f  jointAxis 1 0 0
]
{
}

{%- for j in model.extrajoints %}
DEF {{j.name}} ExtraJoint {
  link1Name "{{j.link1}}"
  link2Name "{{j.link2}}"
  link1LocalPos {{j.trans1[0]}} {{j.trans1[1]}} {{j.trans1[2]}}
  link2LocalPos {{j.trans2[0]}} {{j.trans2[1]}} {{j.trans2[2]}}
  jointType "{{j.jointType}}"
  jointAxis {{j.jointAxis[0]}} {{j.jointAxis[1]}} {{j.jointAxis[2]}}
}
{%- endfor %}

DEF {{model.name}} Humanoid {
  humanoidBody [
    DEF {{model.joint.name}} Joint {
      jointType "fixed"
      jointId {{jointmap[model.joint.name]}}
      translation 0 0 0
      rotation 0 1 0 0
      ulimit 1
      llimit 1
      children [
        {%- if model.link and model.link.visual %}
        DEF {{model.link.name}} Segment {
          mass {{model.link.mass}}
          centerOfMass {{model.link.centerofmass[0]}} {{model.link.centerofmass[1]}} {{model.link.centerofmass[2]}}
          momentsOfInertia [{{model.link.inertia[0][0]}} {{model.link.inertia[0][1]}} {{model.link.inertia[0][2]}} {{model.link.inertia[1][0]}} {{model.link.inertia[1][1]}} {{model.link.inertia[1][2]}} {{model.link.inertia[2][0]}} {{model.link.inertia[2][1]}} {{model.link.inertia[2][2]}}]
          children [
            Inline {
              url "{{model.link.name}}.wrl"
            }
          ]
        }
        {%- endif %}
        {%- for l in model.children recursive %}
        {%- if l.joint %}
        DEF {{l.joint.name}} Joint {
          jointType "{{l.jointtype}}"
          {%- if l.joint.axis %}
          jointAxis {{l.joint.axis}}
          {%- endif %}
          jointId {{jointmap[l.joint.name]}}
          {%- if l.joint.trans is not none %}
          translation {{l.joint.trans[0]}} {{l.joint.trans[1]}} {{l.joint.trans[2]}}
          {%- endif %}
          {%- if l.joint.rot is not none %}
          {%- set angle = tf.rotation_from_matrix(tf.quaternion_matrix(l.joint.rot)) %}
          rotation {{angle[1][0]}} {{angle[1][1]}} {{angle[1][2]}} {{angle[0]}}
          {%- endif %}
          ulimit {{l.joint.limit[0]}}
          llimit {{l.joint.limit[1]}}
          {%- if l.link and l.link.visual %}
          children [
            Transform {
              {%- if l.link.scale is not none %}
              scale {{l.link.scale[0]}} {{l.link.scale[1]}} {{l.link.scale[2]}}
              {%- endif %}
              {%- if l.link.trans is not none %}
              translation {{l.link.trans[0]}} {{l.link.trans[1]}} {{l.link.trans[2]}}
              {%- endif %}
              {%- if l.link.rot is not none %}
              {%- set angle = tf.rotation_from_matrix(tf.quaternion_matrix(l.link.rot)) %}
              rotation {{angle[1][0]}} {{angle[1][1]}} {{angle[1][2]}} {{angle[0]}}
              {%- endif %}
              children [
                Transform {
                  {%- if l.link.visual.scale is not none %}
                  scale {{l.link.visual.scale[0]}} {{l.link.visual.scale[1]}} {{l.link.visual.scale[2]}}
                  {%- endif %}
                  {%- if l.link.visual.trans is not none %}
                  translation {{l.link.visual.trans[0]}} {{l.link.visual.trans[1]}} {{l.link.visual.trans[2]}}
                  {%- endif %}
                  {%- if l.link.visual.rot is not none %}
                  {%- set angle = tf.rotation_from_matrix(tf.quaternion_matrix(l.link.visual.rot)) %}
                  rotation {{angle[1][0]}} {{angle[1][1]}} {{angle[1][2]}} {{angle[0]}}
                  {%- endif %}
                  children [
                    DEF {{l.link.name}} Segment {
                      mass {{l.link.mass}}
                      centerOfMass {{l.link.centerofmass[0]}} {{l.link.centerofmass[1]}} {{l.link.centerofmass[2]}}
                      momentsOfInertia [{{l.link.inertia[0][0]}} {{l.link.inertia[0][1]}} {{l.link.inertia[0][2]}} {{l.link.inertia[1][0]}} {{l.link.inertia[1][1]}} {{l.link.inertia[1][2]}} {{l.link.inertia[2][0]}} {{l.link.inertia[2][1]}} {{l.link.inertia[2][2]}}]
                      children [
                        Inline {
                          url "{{l.link.name}}.wrl"
                        }
                      ]
                    }
                    {%- if l.children %}
                    {{ loop(l.children)|indent(12, True) }}
                    {%- endif %}
                  ]
                }
              ]
            }
          ]
          {%- endif %}
        }
        {%- endif %}
        {%- endfor %}
      ]
    }
  ]
  joints [
    {%- for j in joints %}
    USE {{j.name}}{%- if loop.last == False %},{%- endif %}
    {%- endfor %}
  ]
  segments [
    {%- for l in links %}
    USE {{l.name}}{%- if loop.last == False %},{%- endif %}
    {%- endfor %}
  ]
  name "{{body.name}}"
  version "1.0"
}
