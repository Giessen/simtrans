<?xml version="1.0" ?>
<sdf version="1.5">
  <model name="{{model.name}}">
    <static>0</static>
    {%- for l in model.links %}
    <link name="{{l.name}}">
      {%- set trans = l.gettranslation() %}
      {%- set rpy = l.getrpy() %}
      <pose>{{trans[0]}} {{trans[1]}} {{trans[2]}} {{rpy[0]}} {{rpy[1]}} {{rpy[2]}}</pose>
      <inertial>
        <mass>{{l.mass}}</mass>
        <pose>{{l.centerofmass[0]}} {{l.centerofmass[1]}} {{l.centerofmass[2]}} 0 -0 0</pose>
        <inertia>
          <ixx>{{l.inertia[0][0]}}</ixx>
          <ixy>{{l.inertia[0][1]}}</ixy>
          <ixz>{{l.inertia[0][2]}}</ixz>
          <iyy>{{l.inertia[1][1]}}</iyy>
          <iyz>{{l.inertia[1][2]}}</iyz>
          <izz>{{l.inertia[2][2]}}</izz>
        </inertia>
      </inertial>
      {%- for v in l.visuals %}
      {%- set trans = v.gettranslation() %}
      {%- set rpy = v.getrpy() %}
      {%- set scale = v.getscale() %}
      <visual name="{{v.name}}">
        <pose>{{trans[0]}} {{trans[1]}} {{trans[2]}} {{rpy[0]}} {{rpy[1]}} {{rpy[2]}}</pose>
        {%- if v.shapeType == ShapeModel.SP_MESH %}
        <geometry>
          <mesh>
            <uri>model://{{model.name}}/{{v.name}}.dae</uri>
            <scale>{{scale[0]}} {{scale[1]}} {{scale[2]}}</scale>
          </mesh>
        </geometry>
        {%- endif %}
        {%- if v.shapeType == ShapeModel.SP_BOX %}
        <geometry>
          <box>
            <size>{{v.data.x * scale[0]}} {{v.data.y * scale[1]}} {{v.data.z * scale[2]}}</size>
          </box>
        </geometry>
        {%- endif %}
        {%- if v.shapeType == ShapeModel.SP_CYLINDER %}
        <geometry>
          <cylinder>
            <radius>{{v.data.radius}}</radius>
            <length>{{v.data.height}}</length>
          </cylinder>
        </geometry>
        {%- endif %}
        {%- if v.shapeType == ShapeModel.SP_SPHERE %}
        <geometry>
          <sphere>
            <radius>{{v.data.radius}}</radius>
          </sphere>
        </geometry>
        {%- endif %}
        {%- if v.shapeType != ShapeModel.SP_MESH and v.data.material %}
        <material>
          <diffuse>{{v.data.material.diffuse[0]}} {{v.data.material.diffuse[1]}} {{v.data.material.diffuse[2]}} {{v.data.material.diffuse[3]}}</diffuse>
          <specular>{{v.data.material.specular[0]}} {{v.data.material.specular[1]}} {{v.data.material.specular[2]}} {{v.data.material.specular[3]}}</specular>
          <emissive>{{v.data.material.emission[0]}} {{v.data.material.emission[1]}} {{v.data.material.emission[2]}} {{v.data.material.emission[3]}}</emissive>
        </material>
        {%- endif %}
      </visual>
      <collision name="{{v.name}}">
        <pose>{{trans[0]}} {{trans[1]}} {{trans[2]}} {{rpy[0]}} {{rpy[1]}} {{rpy[2]}}</pose>
        {%- if v.shapeType == ShapeModel.SP_MESH %}
        <geometry>
          <mesh>
            <uri>model://{{model.name}}/{{v.name}}.stl</uri>
            <scale>{{scale[0]}} {{scale[1]}} {{scale[2]}}</scale>
          </mesh>
        </geometry>
        {%- endif %}
        {%- if v.shapeType == ShapeModel.SP_BOX %}
        <geometry>
          <box>
            <size>{{v.data.x * scale[0]}} {{v.data.y * scale[1]}} {{v.data.z * scale[2]}}</size>
          </box>
        </geometry>
        {%- endif %}
        {%- if v.shapeType == ShapeModel.SP_CYLINDER %}
        <geometry>
          <cylinder>
            <radius>{{v.data.radius}}</radius>
            <length>{{v.data.height}}</length>
          </cylinder>
        </geometry>
        {%- endif %}
        {%- if v.shapeType == ShapeModel.SP_SPHERE %}
        <geometry>
          <sphere>
            <radius>{{v.data.radius}}</radius>
          </sphere>
        </geometry>
        {%- endif %}
      </collision>
      {%- endfor %}
      {%- if sensorparentmap[l.name] %}
      {%- for s in sensorparentmap[l.name] %}
      <sensor name="{{s.name}}_sensor" type="{{s.sensorType}}">
        {%- set trans = s.gettranslation() %}
        {%- set rpy = s.getrpy() %}
        <pose>{{trans[0]}} {{trans[1]}} {{trans[2]}} {{rpy[0]}} {{rpy[1]}} {{rpy[2]}}</pose>
        {%- if s.sensorType == "ray" %}
        <ray>
          <scan>
            <horizontal>
              <samples>640</samples>
              <resolution>1</resolution>
              <min_angle>{{s.data.min_angle}}</min_angle>
              <max_angle>{{s.data.max_angle}}</max_angle>
            </horizontal>
          </scan>
          <range>
            <min>{{s.data.min_range}}</min>
            <max>{{s.data.max_range}}</max>
            <resolution>0.01</resolution>
          </range>
        </ray>
        <plugin name="{{s.name}}_controller" filename="libgazebo_ros_laser.so">
          <alwaysOn>true</alwaysOn>
          <robotNamespace>{{model.name}}</robotNamespace>
          <topicName>{{s.name}}/scan</topicName>
          <frameName>{{s.name}}_laser_frame</frameName>
        </plugin>
        {%- elif s.sensorType == "camera" %}
        <camera name="{{s.name}}">
          <pose>0 0 0 0 0 0</pose>
          <horizontal_fov>{{s.data.fov}}</horizontal_fov>
          <image>
            <width>{{s.data.width|int}}</width>
            <height>{{s.data.height|int}}</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>{{s.data.near}}</near>
            <far>{{s.data.far}}</far>
          </clip>
        </camera>
        <plugin name="{{s.name}}_controller" filename="libgazebo_ros_camera.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>0.0</updateRate>
          <robotNamespace>{{model.name}}</robotNamespace>
          <cameraName>{{s.name}}</cameraName>
          <imageTopicName>image_raw</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <frameName>{{s.name}}_optical_frame</frameName>
        </plugin>
        {%- elif s.sensorType == "imu" %}
        <imu>
        </imu>
        {%- endif %}
        <always_on>1</always_on>
        <update_rate>{{s.rate}}</update_rate>
        <visualize>true</visualize>
      </sensor>
      {%- endfor %}
      {%- endif %}
    </link>
    {%- endfor %}
    {%- for j in model.joints %}
    <joint name="{{j.name}}" type="{{j.jointType}}">
      <parent>{{j.parent}}</parent>
      <child>{{j.child}}</child>
      {%- if j.offsetPosition %}
      {%- set trans = j.gettranslation() %}
      {%- set rpy = j.getrpy() %}
      <pose>{{trans[0]}} {{trans[1]}} {{trans[2]}} {{rpy[0]}} {{rpy[1]}} {{rpy[2]}}</pose>
      {%- endif %}
      <axis>
        <xyz>{{j.axis.axis[0]}} {{j.axis.axis[1]}} {{j.axis.axis[2]}}</xyz>
        <limit>
          {%- if j.axis.limit %}
          <lower>{{j.axis.limit[1]}}</lower>
          <upper>{{j.axis.limit[0]}}</upper>
          {%- endif %}
          {%- if j.axis.velocitylimit %}
          <velocity>{{j.axis.velocitylimit[1]}}</velocity>
          {%- endif %}
          {%- if j.axis.effortlimit %}
          <effort>{{j.axis.effortlimit[0]}}</velocity>
          {%- endif %}
        </limit>
        <use_parent_model_frame>true</use_parent_model_frame>
      </axis>
      {%- if j.axis2 %}
      <axis2>
        <xyz>{{j.axis2.axis[0]}} {{j.axis2.axis[1]}} {{j.axis2.axis[2]}}</xyz>
        <limit>
          {%- if j.axis2.limit %}
          <lower>{{j.axis2.limit[1]}}</lower>
          <upper>{{j.axis2.limit[0]}}</upper>
          {%- endif %}
          {%- if j.axis2.velocitylimit %}
          <velocity>{{j.axis2.velocitylimit[1]}}</velocity>
          {%- endif %}
        </limit>
        <use_parent_model_frame>true</use_parent_model_frame>
      </axis2>
      {%- endif %}
    </joint>
    {%- endfor %}
    <plugin name='joint_trajectory_plugin' filename='libgazebo_ros_joint_pose_trajectory.so'>
      <topicName>joint_trajectory</topicName>
      <updateRate>1000.0</updateRate>
    </plugin>
  </model>
</sdf>
